# Generated by Django 4.2.4 on 2023-11-20 17:52

import django.contrib.postgres.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CourseContent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('letter', models.CharField(max_length=12, verbose_name='Letters')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'DP: Course content',
                'verbose_name_plural': 'DP: Course contents',
                'ordering': ['topic', 'letter'],
            },
        ),
        migrations.CreateModel(
            name='CourseTopic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('letter', models.CharField(max_length=12, verbose_name='Letters')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'DP: Course topic',
                'verbose_name_plural': 'DP: Course topics',
                'ordering': ['discipline', 'letter'],
            },
        ),
        migrations.CreateModel(
            name='Criterion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('letter', models.CharField(max_length=1, verbose_name='Letter')),
            ],
            options={
                'verbose_name': 'DP: Criterion',
                'verbose_name_plural': 'DP: Criteria',
                'ordering': ['discipline', 'letter'],
            },
        ),
        migrations.CreateModel(
            name='DpAim',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, null=True, verbose_name='Name')),
                ('type', models.CharField(choices=[('group', 'Group'), ('subject', 'Subject')], max_length=12, verbose_name='Тype (group or subject)')),
            ],
            options={
                'verbose_name': 'DP: Aim',
                'verbose_name_plural': 'DP: Aims',
                'ordering': ['discipline', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DpAtlDevelop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'DP: UnitPlan - Approaches to Learning',
                'verbose_name_plural': 'DP: UnitPlans - Approaches to Learning',
                'ordering': ['unit', 'atl'],
            },
        ),
        migrations.CreateModel(
            name='DpAtlSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('name_rus', models.CharField(max_length=255, null=True, verbose_name='Название на рус. языке')),
            ],
            options={
                'verbose_name': 'DP: ATL Skills',
                'verbose_name_plural': 'DP: ATL Skills',
                'ordering': ['cluster', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DpInquiryQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=255, verbose_name='Inquiry Question')),
                ('type', models.CharField(choices=[('factual', 'Фактический'), ('conceptual', 'Концептуальный'), ('skills-based', 'Skills-based'), ('content-based', 'Content-based'), ('concept-based', 'Concept-based'), ('debatable', 'Дискуссионный')], default='Factual', max_length=16, verbose_name='Type')),
            ],
            options={
                'verbose_name': 'DP: UnitPlan - Inquiry Question',
                'verbose_name_plural': 'DP: UnitPlans - Inquiry Questions',
                'ordering': ['unit', 'type', 'question'],
            },
        ),
        migrations.CreateModel(
            name='DpObjective',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.PositiveIntegerField(default=1, verbose_name='Number')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'DP: Objective',
                'verbose_name_plural': 'DP: Objectives',
                'ordering': ['discipline', 'number'],
            },
        ),
        migrations.CreateModel(
            name='DpObjectiveItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('letter', models.CharField(max_length=1, verbose_name='Letter')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
            ],
            options={
                'verbose_name': 'DP: Objectives Item',
                'verbose_name_plural': 'DP: Objectives Items',
                'ordering': ['objective', 'letter'],
            },
        ),
        migrations.CreateModel(
            name='DpProfileDevelop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'DP: UnitPlan - Learner Profile',
                'verbose_name_plural': 'DP: UnitPlans - Learner Profile',
                'ordering': ['unit', 'profile'],
            },
        ),
        migrations.CreateModel(
            name='DpReflectionPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post', models.TextField(blank=True, null=True, verbose_name='Post')),
                ('type', models.CharField(choices=[('prior', 'Перед началом юнита'), ('during', 'Во время юнита'), ('after', 'После окончания юнита')], max_length=6, verbose_name='Type')),
            ],
            options={
                'verbose_name': 'DP: UnitPlan - Reflection Post',
                'verbose_name_plural': 'DP: UnitPlans - Reflection Posts',
                'ordering': ['unit', 'type', 'post'],
            },
        ),
        migrations.CreateModel(
            name='DpUnitPlanner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Title unit')),
                ('order', models.PositiveSmallIntegerField(default=0, verbose_name='Number')),
                ('levels', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('SL', 'Standart Level'), ('HL', 'High Level')], max_length=5), blank=True, default=list, size=None, verbose_name='Levels')),
                ('hours', models.PositiveSmallIntegerField(default=0, verbose_name='Hours')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Description')),
                ('transfer_goals', models.TextField(blank=True, null=True, verbose_name='Transfer goals')),
                ('essential_understandings', models.TextField(blank=True, null=True, verbose_name='Essential Understandings')),
                ('misunderstandings', models.TextField(blank=True, null=True, verbose_name='Missed concepts/misunderstandings')),
                ('content', models.TextField(blank=True, null=True, verbose_name='Content')),
                ('skills', models.TextField(blank=True, null=True, verbose_name='Skills')),
                ('concepts', models.TextField(blank=True, null=True, verbose_name='Concepts')),
                ('international_mindedness', models.TextField(blank=True, null=True, verbose_name='International Mindedness')),
                ('academic_integrity', models.TextField(blank=True, null=True, verbose_name='Academic Integrity')),
                ('infocom_technology', models.TextField(blank=True, null=True, verbose_name='Information Communication Technology')),
                ('language_learning', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('Activating background knowledge', 'Activating background knowledge'), ('Scaffolding for new learning', 'Scaffolding for new learning'), ('Acquisition of new learning through practice', 'Acquisition of new learning through practice'), ('Demonstrating proficiency', 'Demonstrating proficiency')], max_length=64), blank=True, default=list, size=None, verbose_name='Language and learning')),
                ('language_learning_text', models.TextField(blank=True, null=True, verbose_name='Language and learning description')),
                ('ee_connections', models.TextField(blank=True, null=True, verbose_name='EE / Individual project connections')),
                ('tok_connections', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('Core theme', 'Core theme'), ('Optional themes', 'Optional themes'), ('Areas of knowledge', 'Areas of knowledge'), ('Key concepts', 'Key concepts')], max_length=64), blank=True, default=list, size=None, verbose_name='TOK Connections')),
                ('tok_connections_text', models.TextField(blank=True, null=True, verbose_name='TOK Connections description')),
                ('cas_connections', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('Creativity', 'Creativity'), ('Activity', 'Activity'), ('Service', 'Service')], max_length=64), blank=True, default=list, size=None, verbose_name='CAS Connections')),
                ('cas_connections_text', models.TextField(blank=True, null=True, verbose_name='CAS Connections description')),
                ('formative_assessment', models.TextField(blank=True, null=True, verbose_name='Formative assessment')),
                ('summative_assessment', models.TextField(blank=True, null=True, verbose_name='Summative assessment')),
                ('internal_assessment', models.TextField(blank=True, null=True, verbose_name='Internal assessment')),
                ('peer_self_assessment', models.TextField(blank=True, null=True, verbose_name='Peer and self assessment')),
                ('criteria_text', models.TextField(blank=True, null=True, verbose_name='Assessment criteria description')),
                ('prior_experiences', models.TextField(blank=True, null=True, verbose_name='Prior learning experience')),
                ('pedagogical_approaches', models.TextField(blank=True, null=True, verbose_name='Pedagogical approaches')),
                ('student_expectations', models.TextField(blank=True, null=True, verbose_name='Student expectations')),
                ('feedback', models.TextField(blank=True, null=True, verbose_name='Feedback')),
                ('learning_process', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('Lecture', 'Lecture'), ('Socratic seminar', 'Socratic seminar'), ('Small group/pair work', 'Small group/pair work'), ('PowerPoint lecture/notes', 'PowerPoint lecture/notes'), ('Individual presentations', 'Individual presentations'), ('Group presentations', 'Group presentations'), ('Student lecture/leading', 'Student lecture/leading'), ('Interdisciplinary Learning', 'Interdisciplinary Learning')], max_length=64), blank=True, default=list, size=None, verbose_name='Learning Process')),
                ('learning_process_text', models.TextField(blank=True, null=True, verbose_name='Learning Process description')),
                ('differentiation', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(choices=[('Affirm identity – build self-esteem', 'Affirm identity – build self-esteem'), ('Value prior knowledge', 'Value prior knowledge'), ('Scaffold learning', 'Scaffold learning'), ('Extend learning', 'Extend learning')], max_length=64), blank=True, default=list, size=None, verbose_name='Differentiation')),
                ('differentiation_text', models.TextField(blank=True, null=True, verbose_name='Differentiation description')),
                ('learning_experiences', models.TextField(blank=True, null=True, verbose_name='Learning experiences and strategies')),
                ('resources', models.TextField(blank=True, null=True, verbose_name='Resources')),
                ('cross_curricular_links', models.TextField(blank=True, null=True, verbose_name='Cross-curricular links')),
                ('co_curricular_links', models.TextField(blank=True, null=True, verbose_name='Co-curricular links')),
                ('work_well', models.TextField(blank=True, null=True, verbose_name='What worked well?')),
                ('work_well_not', models.TextField(blank=True, null=True, verbose_name='What didn’t work well?')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes/changes/suggestions')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation date')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Update date')),
                ('aims', models.ManyToManyField(blank=True, related_name='dp_unitplans', to='dp.dpaim', verbose_name='Aims')),
            ],
            options={
                'verbose_name': 'DP: UnitPlan',
                'verbose_name_plural': 'DP: UnitPlans',
                'ordering': ['year', 'subject', 'order', 'title'],
            },
        ),
    ]
